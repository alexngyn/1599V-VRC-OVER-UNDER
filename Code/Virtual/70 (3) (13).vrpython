{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\narm_motor = Motor(\"ArmMotor\", 3)\nrotation = Rotation(\"Rotation\", 7)\nintake_motor = Motor(\"IntakeMotor\", 8)\noptical = Optical(\"Optical\", 11)\ngps = GPS(\"GPS\", 20)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\ndrivetrain.set_heading(gps.heading()+90, DEGREES)\ndrivetrain.set_drive_velocity(0, PERCENT)\ndrivetrain.set_turn_velocity(0, PERCENT)\nintake_motor.set_velocity(100, PERCENT)\narm_motor.set_velocity(100, PERCENT)\n\ndrivetrain.drive(FORWARD)\ndrivetrain.turn(RIGHT)\n\nsgn = lambda x: -1 if x < 0 else 1\nangle_error = lambda angle1, angle2, radians=False: math.remainder(angle1 - angle2, 2 * math.pi if radians else 360)\n\nlateralError = 1\n\ndef goto(x2,y2,d=FORWARD,sbt=False,wt=True):\n    x1, y1 = gps.x_position(MM), gps.y_position(MM)\n    if x1 == x2 and y1 == y2: return\n    turnto(x2,y2,d)\n    l = math.hypot(x2-x1, y2-y1)\n    if sbt == True: l -= 200\n    drivetrain.drive_for(d, l, MM,wait=wt)\n    x3, y3 = gps.x_position(MM), gps.y_position(MM)\n    if abs(x3-x2) > 10 or abs(y3-y2) > 10: goto(x2,y2,d,sbt,wt)\n\ndef goto2(targetX,targetY,targetTheta,d=FORWARD,sbt=False,wt=True):\n    targetTheta = math.pi - math.radians(targetTheta)\n    drivetrain.drive(FORWARD)\n    #drivetrain.turn(RIGHT)\n    while True:\n        currentX, currentY, currentTheta = gps.x_position(MM), gps.y_position(MM), gps.heading() + 90\n        distTarget = math.hypot(targetX-currentX, targetY-currentY)\n        carrotX = targetX - math.cos(targetTheta) * 0.6 * distTarget;\n        carrotY = targetY - math.sin(targetTheta) * 0.6 * distTarget;\n\n        angularError = angle_error(currentTheta, math.atan2(carrotY - currentY, carrotX - currentX));\n        lateralError = 2\n        drivetrain.set_drive_velocity(lateralError*10000,PERCENT)\n        drivetrain.set_turn_velocity(angularError,PERCENT)\n        wait(100,MSEC)\n\ndef turnto(x2,y2,d=FORWARD,wt=True):\n    x1, y1 = gps.x_position(MM), gps.y_position(MM)\n    deltaX = x2 - x1\n    deltaY = y2 - y1\n    targetTheta = math.degrees(math.pi - math.atan2(deltaY, deltaX)) % 360\n    if d == REVERSE: targetTheta -= 180\n    drivetrain.turn_to_heading(targetTheta, DEGREES, wait=wt)\n\ndef main():\n    monitor_variable(\"lateralError\")\n    #turnto(0,0)\n    goto2(0,0,90)\n\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"VRC24","robotModel":"vrc24","target":"Physical"}