{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n\nimport sys\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\narm_motor = Motor(\"ArmMotor\", 3)\nrotation = Rotation(\"Rotation\", 7)\nintake_motor = Motor(\"IntakeMotor\", 8)\noptical = Optical(\"Optical\", 11)\ngps = GPS(\"GPS\", 20)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\ndrivetrain.set_heading(gps.heading(), DEGREES)\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(100, PERCENT)\nintake_motor.set_velocity(100, PERCENT)\narm_motor.set_velocity(100, PERCENT)\n\ndef goto(x2,y2,d=FORWARD,sbt=False,wt=True):\n    x1, y1 = gps.x_position(MM), gps.y_position(MM)\n    if x1 == x2 and y1 == y2: return\n    turnto(x2,y2,d)\n    l = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    if sbt == True: l -= 200\n    drivetrain.drive_for(d, l, MM,wait=wt)\n    x3, y3 = gps.x_position(MM), gps.y_position(MM)\n    if abs(x3-x2) > 10 or abs(y3-y2) > 10: goto(x2,y2,d,sbt,wt)\n\ndef turnto(x2,y2,d=FORWARD,wt=True):\n    x1, y1 = gps.x_position(MM), gps.y_position(MM)\n    try: \n        a = math.degrees(math.atan((x2-x1)/(y2-y1)))\n    except ZeroDivisionError:\n        if x2 > x1: \n            a = 90\n        elif x2 < x1: \n            a = -90\n        else:\n            pass\n    if y1 > y2: a -= 180\n    if d == REVERSE: a -= 180\n    drivetrain.turn_to_heading(a, DEGREES,wait=wt)\n\ndef main():\n    arm_motor.spin_to_position(1180, DEGREES, wait=False)\n    goto(-900,000)\n    drivetrain.turn_to_heading(-140, DEGREES)\n    #while arm_motor.is_spinning(): wait(10, MSEC)\n    wait(0.1,SECONDS)\n    intake_motor.spin_for(REVERSE, 400, DEGREES)\n    intake_motor.spin(FORWARD)\n    goto(-900,-600)\n    drivetrain.turn_to_heading(-90, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n\n    intake_motor.set_velocity(100, PERCENT)\n    goto(-400,-600)\n    intake_motor.spin_for(FORWARD, 1000, DEGREES, wait=False)\n    goto(850,-500)\n    drivetrain.turn_to_heading(80, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n    goto(150,-900)\n    intake_motor.spin_for(FORWARD, 200, DEGREES, wait=False)\n    goto(850,-500)\n    drivetrain.turn_to_heading(80, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n\n    #goto(1000,-1000)\n    intake_motor.spin(FORWARD)\n    goto(1400,-1400)\n    arm_motor.spin_to_position(1300, DEGREES)\n    goto(1500,-900)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n\n    \"\"\"\n    goto(400,-1500)\n    intake_motor.spin(FORWARD)\n    goto(300,-1500)\n    #wait(0.1,SECONDS)\n    #goto(1400,-1300)\n    goto(1500,-900)\n    drivetrain.turn_to_heading(30, DEGREES)\n    intake_motor.spin_for(REVERSE, 400, DEGREES)\n    \"\"\"\n\n    intake_motor.spin(FORWARD)\n    goto(150,-230)\n    #goto(150,-150)\n    wait(0.1, SECONDS)\n    #intake_motor.spin_for(FORWARD, 200, DEGREES, wait=False)\n    goto(850,-100)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n    intake_motor.spin(FORWARD)\n    goto(-250,-50)\n    #intake_motor.spin_for(FORWARD, 200, DEGREES, wait=False)\n    goto(500,0,REVERSE)\n    goto(850,0)\n    drivetrain.turn_to_heading(100, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n    intake_motor.spin(FORWARD)\n    goto(700,0)\n    goto(120,390)\n    wait(0.1,SECONDS)\n    #intake_motor.spin_for(FORWARD, 200, DEGREES, wait=False)\n    goto(600,300,REVERSE)\n    goto(850,280)\n    #drivetrain.turn_to_heading(80, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n    intake_motor.spin(FORWARD)\n    goto(700,500)\n    goto(150,850)\n    wait(0.1,SECONDS)\n    #intake_motor.spin_for(FORWARD, 200, DEGREES, wait=False)\n    goto(850,400)\n    drivetrain.turn_to_heading(115, DEGREES)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n\n\n    goto(600,600,REVERSE)\n    intake_motor.spin(FORWARD)\n    goto(1400,1400)\n    arm_motor.spin_to_position(1300, DEGREES)\n    goto(1500,900)\n    intake_motor.spin_for(REVERSE, 360, DEGREES)\n\n    \"\"\"\n    goto(900,1500)\n    intake_motor.spin(FORWARD)\n    goto(300,1500)\n    #wait(0.1,SECONDS)\n    goto(1400,1300)\n    goto(1500,900)\n    intake_motor.spin_for(REVERSE, 400, DEGREES)\n    \"\"\"\n\n    goto(-900,900,REVERSE)\n    intake_motor.spin(FORWARD)\n    goto(-1400,1400)\n    arm_motor.spin_to_position(200, DEGREES, wait=False)\n    goto(-1200,1200,REVERSE)\n    #goto(-400,450,REVERSE)\n    goto(-300,450,REVERSE)\n    drivetrain.turn_to_heading(-90, DEGREES)\n    intake_motor.spin_for(REVERSE, 380, DEGREES)\n\n    arm_motor.spin_to_position(1180, DEGREES, wait=False)\n    goto(-600,600)\n    intake_motor.spin(FORWARD)\n    goto(-1400,1400)\n    arm_motor.spin_to_position(1300, DEGREES)\n    arm_motor.spin_to_position(200, DEGREES, wait=False)\n    goto(-1200,1200,REVERSE)\n    #goto(-400,200,REVERSE)\n    goto(-300,250,REVERSE)\n    drivetrain.turn_to_heading(-90, DEGREES)\n    intake_motor.spin_for(REVERSE, 380, DEGREES)\n\n    arm_motor.spin_to_position(1180, DEGREES, wait=False)\n    goto(-600,600)\n    intake_motor.spin(FORWARD)\n    goto(-1400,1400)\n    arm_motor.spin_to_position(1300, DEGREES)\n    arm_motor.spin_to_position(200, DEGREES, wait=False)\n    goto(-1200,1200,REVERSE)\n    #goto(-400,50,REVERSE)\n    goto(-300,50,REVERSE)\n    drivetrain.turn_to_heading(-90, DEGREES)\n    intake_motor.spin_for(REVERSE, 380, DEGREES)\n\n    arm_motor.spin_to_position(1180, DEGREES, wait=False)\n    goto(-600,-600)\n    intake_motor.spin(FORWARD)\n    goto(-1400,-1400)\n    arm_motor.spin_to_position(1300, DEGREES)\n    arm_motor.spin_to_position(200, DEGREES, wait=False)\n    goto(-1200,-1200,REVERSE)\n    #goto(-400,-100,REVERSE)\n    goto(-300,-150,REVERSE)\n    drivetrain.turn_to_heading(-90, DEGREES)\n    intake_motor.spin_for(REVERSE, 380, DEGREES)\n\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"VRC24","robotModel":"vrc24","target":"Physical"}